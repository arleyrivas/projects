import { ICustomer } from "../dto/customer.dto";
import { ISecondPasswordGenerateResponse } from "../dto/second-password-generate-response.dto";
import { ISecondPasswordValidationResponse } from "../dto/second-password-validation-response.dto";
import { IAgentIdOrNameSearch } from "./agent-id-or-name-search.interface";
import { IAgentRepresentationItem } from "./agent-representation-item.interface";
import { IAgentRepresentation } from "./agent-representation.interface";
import { ICapacityTruck } from "./capacity-truck.interface";
import { ICompanyType } from "./company-type.interface";
import { ICompany } from "./company.interface";
import { IConfigurationPortal } from "./configuration-portal.interface";
import { IBookingSearch, IContainerizedLoad, IHazards, IPinSearch } from "./containerized-load.interface";
import { IDataAppointmentCC } from "./data-appointment-cc.interface";
import { IDataAppointmentCS } from "./data-appointment-cs.interface";
import { IDetachedLoad } from "./detached-load.interface";
import { IDisponibilidadCitas } from "./disponibilidad-citas.interface";
import { IDocumentationTruck } from "./documentation-truck.interface";
import { IDriver, IDriverValidation } from "./driver.interface";
import { IEquipmentType } from "./equipment-type.interface";
import { IGrantGroupContainerizedLoad } from "./group-contanerized-load.interface";
import { IGrantGroupDetachedLoad } from "./group-detached-load.interface";
import { IImpersonalizated } from "./impersonalizated-dto.interface";
import { IItemCheckeados, IItemCheckeadosContenerized, ISetContenedorType } from "./item-checkeados.interface";
import { INotificationsPortal } from "./notifications-portal.interface";
import { IPhysicalContainer } from "./physical-container.interface";
import { IPin } from "./pin.interface";
import { IHorariosDisponibles, IHorariosDisponiblesCC } from "./storage-cita.interface";
import { ITruckPinPinContainerized } from "./truck-pin-pin-containerized.interface";
import { ITruckPin } from "./truck-pin.interface";
import { ITruck } from "./truck.interface";

export interface ISharedStore {
  file: string;
  spinnerAutoClose: boolean;
  hourRestriction: string | null;
  restrictionMessage: string | null;
  secondPassword: ISecondPasswordGenerateResponse | null;
  secondPasswordValidation: ISecondPasswordValidationResponse | null;
  hasDoubleFactor: boolean;
  impersonated: boolean;
  companyTypes: ICompanyType[];
  companies: ICompany[];
  Impersonalizated: IImpersonalizated | null;
  customer: ICustomer[] | null;
  selectedCustomer: string | null;
  agent: IAgentIdOrNameSearch[];
  truckers: IAgentIdOrNameSearch[];
  selectedAgent: string | null;
  allConsignees: IAgentRepresentationItem[];
  selectedTrucker: string | null;
  idleTimeout: string | null;
  truck: ITruck | null;
  documentationTruck: IDocumentationTruck[] | null;
  capacityTruck: ICapacityTruck[] | null;
  pin: IPin | null;
  validationPin: IDetachedLoad[] | null;
  groupValidationPin: IGrantGroupDetachedLoad[] | null;
  itemCheckeados: IItemCheckeados[] | null;
  driver: IDriver[] | null;
  selectedDriver: string | null;
  validationDriver: IDriverValidation[] | null;
  validationServiceDriver: IDriverValidation[] | null;
  disponibilidadCitas: IDisponibilidadCitas[] | null;
  horariosDisponibles: IHorariosDisponibles[] | null;
  infoApointment: IDataAppointmentCS | null;
  validationPinContainerized: IContainerizedLoad[] | null;
  groupValidationPinContainerized: IGrantGroupContainerizedLoad[] | null;
  itemCheckeadosContainerized: IItemCheckeadosContenerized[] | null;
  typeContainer: ISetContenedorType[] | null;
  horariosDisponiblesCC: IHorariosDisponiblesCC[] | null;
  pinSearchContainerized: IPinSearch[] | null;
  bookingSearchContainerized: IBookingSearch[] | null;
  configurationPortal: IConfigurationPortal | null;
  bookingID: IContainerizedLoad[] | null;
  emptyEro: any[];
  validateEro: any[];
  hazardsByBooking: IHazards[] | null;
  validateContainer: number | null;
  physicalContainer: IPhysicalContainer | null;
  forBooking: any | null;
  digitCheck: boolean | null;
  agentRepresentation: IAgentRepresentation | null;
  equipmentType: IEquipmentType | null;
  infoAppointmentCC: IDataAppointmentCC | null;
  notificationsPortal: INotificationsPortal[] | null;

}
